package lib;
/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ReadingMsgAnswer'
 * message type.
 */

public class ReadingMsgAnswer extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 117;

    /** Create a new ReadingMsgAnswer of size 26. */
    public ReadingMsgAnswer() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ReadingMsgAnswer of the given data_length. */
    public ReadingMsgAnswer(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReadingMsgAnswer with the given data_length
     * and base offset.
     */
    public ReadingMsgAnswer(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReadingMsgAnswer using the given byte array
     * as backing store.
     */
    public ReadingMsgAnswer(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReadingMsgAnswer using the given byte array
     * as backing store, with the given base offset.
     */
    public ReadingMsgAnswer(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReadingMsgAnswer using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ReadingMsgAnswer(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReadingMsgAnswer embedded in the given message
     * at the given base offset.
     */
    public ReadingMsgAnswer(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReadingMsgAnswer embedded in the given message
     * at the given base offset and length.
     */
    public ReadingMsgAnswer(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ReadingMsgAnswer> \n";
      try {
        s += "  [messageType=0x"+Long.toHexString(get_messageType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [readings=";
        for (int i = 0; i < 10; i++) {
          s += "0x"+Long.toHexString(getElement_readings(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: messageType
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'messageType' is signed (false).
     */
    public static boolean isSigned_messageType() {
        return false;
    }

    /**
     * Return whether the field 'messageType' is an array (false).
     */
    public static boolean isArray_messageType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'messageType'
     */
    public static int offset_messageType() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'messageType'
     */
    public static int offsetBits_messageType() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'messageType'
     */
    public int get_messageType() {
        return (int)getUIntBEElement(offsetBits_messageType(), 16);
    }

    /**
     * Set the value of the field 'messageType'
     */
    public void set_messageType(int value) {
        setUIntBEElement(offsetBits_messageType(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'messageType'
     */
    public static int size_messageType() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'messageType'
     */
    public static int sizeBits_messageType() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'type'
     */
    public int get_type() {
        return (int)getUIntBEElement(offsetBits_type(), 16);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(int value) {
        setUIntBEElement(offsetBits_type(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: readings
    //   Field type: int[], unsigned
    //   Offset (bits): 48
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'readings' is signed (false).
     */
    public static boolean isSigned_readings() {
        return false;
    }

    /**
     * Return whether the field 'readings' is an array (true).
     */
    public static boolean isArray_readings() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'readings'
     */
    public static int offset_readings(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'readings'
     */
    public static int offsetBits_readings(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'readings' as a int[]
     */
    public int[] get_readings() {
        int[] tmp = new int[10];
        for (int index0 = 0; index0 < numElements_readings(0); index0++) {
            tmp[index0] = getElement_readings(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'readings' from the given int[]
     */
    public void set_readings(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_readings(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'readings'
     */
    public int getElement_readings(int index1) {
        return (int)getUIntBEElement(offsetBits_readings(index1), 16);
    }

    /**
     * Set an element of the array 'readings'
     */
    public void setElement_readings(int index1, int value) {
        setUIntBEElement(offsetBits_readings(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'readings'
     */
    public static int totalSize_readings() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'readings'
     */
    public static int totalSizeBits_readings() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'readings'
     */
    public static int elementSize_readings() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'readings'
     */
    public static int elementSizeBits_readings() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'readings'
     */
    public static int numDimensions_readings() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'readings'
     */
    public static int numElements_readings() {
        return 10;
    }

    /**
     * Return the number of elements in the array 'readings'
     * for the given dimension.
     */
    public static int numElements_readings(int dimension) {
      int array_dims[] = { 10,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
